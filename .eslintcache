[{"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/index.js":"1","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/App.js":"2","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Header.jsx":"3","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Loader.jsx":"4","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Footer.jsx":"5","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Card/Card.jsx":"6","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Card/CardImage.jsx":"7","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/FetchMovie.jsx":"8","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/FetchMovieList.jsx":"9","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/PageNotFound.jsx":"10","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/HomePage.jsx":"11","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/MoviePage.jsx":"12","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/useFetchMovieList.jsx":"13","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/useFetchMovie.jsx":"14"},{"size":394,"mtime":1608156534331,"results":"15","hashOfConfig":"16"},{"size":1066,"mtime":1609150482733,"results":"17","hashOfConfig":"16"},{"size":559,"mtime":1608329155003,"results":"18","hashOfConfig":"16"},{"size":400,"mtime":1608123322344,"results":"19","hashOfConfig":"16"},{"size":524,"mtime":1608355650803,"results":"20","hashOfConfig":"16"},{"size":698,"mtime":1608353421440,"results":"21","hashOfConfig":"16"},{"size":476,"mtime":1608353358578,"results":"22","hashOfConfig":"16"},{"size":1273,"mtime":1608438477233,"results":"23","hashOfConfig":"16"},{"size":1738,"mtime":1608524203770,"results":"24","hashOfConfig":"16"},{"size":730,"mtime":1608353838192,"results":"25","hashOfConfig":"16"},{"size":743,"mtime":1608353722964,"results":"26","hashOfConfig":"16"},{"size":941,"mtime":1608353722027,"results":"27","hashOfConfig":"16"},{"size":1871,"mtime":1608438303030,"results":"28","hashOfConfig":"16"},{"size":1619,"mtime":1608438571871,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"14gjcym",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/index.js",[],["62","63"],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/App.js",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Header.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Loader.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Footer.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Card/Card.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Card/CardImage.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/FetchMovie.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/FetchMovieList.jsx",["64","65"],"/* FetchMovieList.jsx\nThis file handles the retrievel and presentation of movies now showing at cinemaWorld & filmWorld\nAuthor(s):\n    Shane Perera\nDate Created:\n    December 15th, 2020\n*/\n\n//Import Statements\nimport React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card.jsx';\nimport Loader from '../Loader.jsx';\nimport { Link } from 'react-router-dom';\nimport useFetchMovieList from './useFetchMovieList'\n\nexport const url = {\n  cinemaWorld: \"https://challenge.lexicondigital.com.au/api/cinemaworld\",\n  filmWorld: \"https://challenge.lexicondigital.com.au/api/filmworld\"\n};\nexport const headers = {\n  'x-api-key': \"Yr2636E6BTD3UCdleMkf7UEdqKnd9n361TQL9An7\"\n};\n\nfunction FetchMovieList() {\n  /*\n    Destructures the response from useFetchMovieList() display a list of movies now showing at both cinemaWorld & filmWorld\n\n    Args:\n      N/A\n\n    Returns:\n      Array of movie objects\n      isLoading boolean\n      error response\n  */\n  const { movieObject, isLoading, error } = useFetchMovieList();\n\n  if (error) {\n    return(\n      <div className=\"error-message-container\">\n        <h1>Oops!</h1>\n        <p className=\"error-message\">{error}</p>\n      </div>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <Loader/>\n    )\n  }\n\n  return (\n    <div>\n      <ul className=\"responsive-list\">\n        {movieObject.map(movie => {\n          return (\n            <li className=\"list-component\" key={movie.key}>\n              <Link to={{ pathname: `/movie/${movie.Title}/`, state: { ID_C: movie.cinemaWorldId, ID_F: movie.filmWorldId } }} className=\"list-link\">\n                <Card movie={movie} />\n              </Link>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default FetchMovieList","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/PageNotFound.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/HomePage.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/Pages/MoviePage.jsx",[],"/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/useFetchMovieList.jsx",["66"],"/* useFetchMovieList.jsx\nThis file creates a useEffect hook to render content on the home page (when component mounts)\nAuthor(s):\n    Shane Perera\nDate Created:\n    December 15th, 2020\n*/\n\n//Import Statements\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport {url, headers} from './FetchMovieList';\n\nfunction useFetchMovieList() {\n  /*\n    Creates a custom object that returns information about each movie in list\n\n    Args:\n      N/A\n\n    Returns:\n      Custom object containing key, title, IDs and Poster\n      isLoading boolean\n      error response\n  */\n  const [movieObject, setMovieObject] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setIsLoading(true)\n    const fetchData = () => {\n      const cinemaWorldURL = `${url.cinemaWorld}/movies`;\n      const filmWorldURL = `${url.filmWorld}/movies`;\n\n      Promise.all([\n        Axios.get(cinemaWorldURL, { headers }),\n        Axios.get(filmWorldURL, { headers })\n      ])\n        .then(([data1, data2]) => {\n          data1 = data1.data.Movies;\n          data2 = data2.data.Movies;\n          const combinedObj = [];\n          data1.forEach((val, index) => {\n            //Create custom array of objects\n            combinedObj.push({\n              key: index,\n              Title: val.Title,\n              cinemaWorldId: val.ID,\n              filmWorldId: data2[index].ID,\n              Poster: val.Poster\n            })\n          });\n          console.log(combinedObj);\n          setMovieObject(combinedObj);\n          setIsLoading(false);\n        })\n        .catch(() => {\n          setError(\"There has been an error fetching the movies. Please refresh the page.\");\n        })\n    };\n    fetchData();\n  }, []);\n\n  return { movieObject, isLoading, error }\n}\n\nexport default useFetchMovieList","/Users/nicholasnimorakiotakis/Desktop/lexicondigitalchallenge/src/Components/FetchData/useFetchMovie.jsx",["67"],"/* useFetchMovie.jsx\nThis file creates a useEffect hook to return information about movie (based on ID) from each movie provider\nAuthor(s):\n    Shane Perera\nDate Created:\n    December 15th, 2020\n*/\n\n//Import Statements\nimport React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport {url, headers} from './FetchMovieList';\n\nfunction useFetchMovie(ID_C, ID_F){\n  /*\n    Fetches a movie object that corresponds to user selection on home page.\n\n    Args:\n      N/A\n\n    Returns:\n      Movie object from cinemaWorld (for price)\n      Movie object from filmWorld (for price)\n      isLoading boolean\n      error response\n  */\n  \n  const [cinemaWorldObject, setCinemaWorldObject] = useState({});\n  const [filmWorldObject, setFilmWorldObject] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(()=> {\n    setIsLoading(true)\n    const fetchData = () => {\n      const cinemaWorldURL = `${url.cinemaWorld}/movie/${ID_C}`;\n      const filmWorldURL = `${url.filmWorld}/movie/${ID_F}`;\n      \n      Promise.all([\n        Axios.get(cinemaWorldURL, {headers}),\n        Axios.get(filmWorldURL, {headers}) //CHECK THIS\n      ])\n      .then(([data1, data2]) => {\n        setCinemaWorldObject(data1.data);\n        setFilmWorldObject(data2.data);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setError(\"There has been an error fetching the movie. Please refresh the page.\");\n      })\n    };\n    fetchData();\n  }, [ID_C, ID_F]);\n\n  return {cinemaWorldObject, filmWorldObject, isLoading, error}\n}\n\nexport default useFetchMovie",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":10,"column":17,"nodeType":"74","messageId":"75","endLine":10,"endColumn":25},{"ruleId":"72","severity":1,"message":"76","line":10,"column":27,"nodeType":"74","messageId":"75","endLine":10,"endColumn":36},{"ruleId":"72","severity":1,"message":"77","line":10,"column":8,"nodeType":"74","messageId":"75","endLine":10,"endColumn":13},{"ruleId":"72","severity":1,"message":"77","line":10,"column":8,"nodeType":"74","messageId":"75","endLine":10,"endColumn":13},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]